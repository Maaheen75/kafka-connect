// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpss.proto

package io.confluent.connect.jdbc.gp.gpss.api;

public interface FormatAvroOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.FormatAvro)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The source column name
   * </pre>
   *
   * <code>string source_column_name = 1;</code>
   */
  String getSourceColumnName();
  /**
   * <pre>
   * The source column name
   * </pre>
   *
   * <code>string source_column_name = 1;</code>
   */
  com.google.protobuf.ByteString
      getSourceColumnNameBytes();

  /**
   * <pre>
   * If specified, gpss requests the avro schema from url
   * </pre>
   *
   * <code>string schema_url = 2;</code>
   */
  String getSchemaUrl();
  /**
   * <pre>
   * If specified, gpss requests the avro schema from url
   * </pre>
   *
   * <code>string schema_url = 2;</code>
   */
  com.google.protobuf.ByteString
      getSchemaUrlBytes();

  /**
   * <pre>
   * When true and schema_url is specified, gpss converts bytes field in avro message to base64-encoded string
   * </pre>
   *
   * <code>bool bytes_to_base64 = 3;</code>
   */
  boolean getBytesToBase64();

  /**
   * <pre>
   * When true, gpss ignores avro deserialize errors, and puts data into log error
   * </pre>
   *
   * <code>bool ignore_deserialize_error = 4;</code>
   */
  boolean getIgnoreDeserializeError();

  /**
   * <pre>
   * Used for standalone avro schema; if exists, gpss retrieves the avro schema from the path on every node in the greenplum cluster
   * </pre>
   *
   * <code>string schema_path_on_gpdb = 5;</code>
   */
  String getSchemaPathOnGpdb();
  /**
   * <pre>
   * Used for standalone avro schema; if exists, gpss retrieves the avro schema from the path on every node in the greenplum cluster
   * </pre>
   *
   * <code>string schema_path_on_gpdb = 5;</code>
   */
  com.google.protobuf.ByteString
      getSchemaPathOnGpdbBytes();

  /**
   * <pre>
   * The path to the specified CA certificate file for gpss verifying the peer; the CA file must exist at that path on every greenplum segment
   * </pre>
   *
   * <code>string schema_ca_on_gpdb = 6;</code>
   */
  String getSchemaCaOnGpdb();
  /**
   * <pre>
   * The path to the specified CA certificate file for gpss verifying the peer; the CA file must exist at that path on every greenplum segment
   * </pre>
   *
   * <code>string schema_ca_on_gpdb = 6;</code>
   */
  com.google.protobuf.ByteString
      getSchemaCaOnGpdbBytes();

  /**
   * <pre>
   * The path to the specified client certificate file for gpss connecting to HTTPS schema registry; required if the registry's client authentication is enabled
   * </pre>
   *
   * <code>string schema_cert_on_gpdb = 7;</code>
   */
  String getSchemaCertOnGpdb();
  /**
   * <pre>
   * The path to the specified client certificate file for gpss connecting to HTTPS schema registry; required if the registry's client authentication is enabled
   * </pre>
   *
   * <code>string schema_cert_on_gpdb = 7;</code>
   */
  com.google.protobuf.ByteString
      getSchemaCertOnGpdbBytes();

  /**
   * <pre>
   * The path to the specified private key file for gpss connecting to HTTPS schema registry; required if the registry's client authentication is enabled
   * </pre>
   *
   * <code>string schema_key_on_gpdb = 8;</code>
   */
  String getSchemaKeyOnGpdb();
  /**
   * <pre>
   * The path to the specified private key file for gpss connecting to HTTPS schema registry; required if the registry's client authentication is enabled
   * </pre>
   *
   * <code>string schema_key_on_gpdb = 8;</code>
   */
  com.google.protobuf.ByteString
      getSchemaKeyOnGpdbBytes();

  /**
   * <pre>
   * The minimum transport layer security (TLS) version that gpss requests on the registry connection; the default value is 1.0, and gpss supports minimum TLS versions of 1.0, 1.1, 1.2, and 1.3
   * </pre>
   *
   * <code>string schema_min_tls_version = 9;</code>
   */
  String getSchemaMinTlsVersion();
  /**
   * <pre>
   * The minimum transport layer security (TLS) version that gpss requests on the registry connection; the default value is 1.0, and gpss supports minimum TLS versions of 1.0, 1.1, 1.2, and 1.3
   * </pre>
   *
   * <code>string schema_min_tls_version = 9;</code>
   */
  com.google.protobuf.ByteString
      getSchemaMinTlsVersionBytes();
}
